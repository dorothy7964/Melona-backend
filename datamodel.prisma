type User {
    id: ID! @id
    email: String! @unique
    userName: String! @unique
    password: String!
    avatar: String
        @default(
            value: "https://image.flaticon.com/icons/svg/401/401155.svg"
        )
    address: String
    following: [User!]! @relation(name: "FollowRelation")
    followers: [User!]! @relation(name: "FollowRelation")
    posts: [Post!]! @relation(name: "PostsOfUser", onDelete: CASCADE)
    comments: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
    recomments: [ReComment!]! @relation(name: "ReCommentsOfUser", onDelete: CASCADE)
    contents: [Contents!]! @relation(name: "ContentsOfUser", onDelete: CASCADE)
    contentsReq: [ContentsReq!]! @relation(name: "ContentsReqOfUser", onDelete: CASCADE)
    applys: [Apply!]! @relation(name: "ApplysOfUser", onDelete: CASCADE)
    chatRooms: [ChatRoom!]! @relation(name: "ChatRoomsOfUser", onDelete: CASCADE)
    groupRooms: [GroupRoom!]! @relation(name: "GroupRoomsOfUser", onDelete: CASCADE)
    groupRoomMember: [GroupRoomMember!]! @relation(name: "GroupRoomMemberOfUser", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type Post {
    id: ID! @id
    viewApply: Boolean @default(value: false)
    anotherPage: Boolean @default(value: false)
    groupRoom: String @default(value: "none")
    user: User @relation(name: "PostsOfUser")
    location: String! @default(value: "무관")
    lastDate: String!
    categorys: [Category!]! @relation(name: "CategorysOfPost", onDelete: CASCADE)
    contents: [Contents!]! @relation(name: "ContentsOfPost", onDelete: CASCADE)
    comments: [Comment!]! @relation(name: "CommentOfPost", onDelete: CASCADE)
    applys: [Apply!]! @relation(name: "ApplysOfPost", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type Category {
    id: ID! @id
    text: String!
    post: Post @relation(name: "CategorysOfPost")
    contents: [Contents!]! @relation(name: "ContentsOfCategory", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type Contents {
    id: ID! @id
    text: String!
    check: Boolean! @default(value: false)
    confirmCheck: Boolean! @default(value: false)
    confirmFile: String
    confirmProgress: Int @default(value: 0)
    user: User @relation(name: "ContentsOfUser")
    post: Post @relation(name: "ContentsOfPost")
    category: Category @relation(name: "ContentsOfCategory")
    contentsReqs:[ContentsReq!]!  @relation(name: "ContentsReqOfContents", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type ContentsReq {
    id: ID! @id
    check: Boolean! @default(value: false)
    confirmCheck: Boolean! @default(value: false)
    confirmFile: String
    confirmProgress: Int @default(value: 0)
    contents: Contents @relation(name: "ContentsReqOfContents")
    user: User @relation(name: "ContentsReqOfUser")
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type Apply {
    id: ID! @id
    user: User! @relation(name: "ApplysOfUser")
    post: Post! @relation(name: "ApplysOfPost")
    apply: Boolean! @default(value: false)
    applyWait: Boolean @default(value: false)
    readCheck: Boolean @default(value: false)
    progress: Boolean @default(value: false)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type Comment {
    id: ID! @id
    text: String!
    user: User @relation(name: "CommentsOfUser")
    post: Post @relation(name: "CommentOfPost")
    reply: Boolean @default(value: false)
    recomments: [ReComment!]! @relation(name: "ReCommentsOfComment", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type ReComment {
    id: ID! @id
    text: String
    user: User @relation(name: "ReCommentsOfUser")
    comments: Comment @relation(name: "ReCommentsOfComment")
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type ChatRoom {
    id: ID! @id
    participants: [User!]! @relation(name: "ChatRoomsOfUser") 
    messages: [Message!]!  @relation(name: "MessagesOfChatRoom", onDelete: CASCADE)
    lastMessage: String
    lastMsgTime: DateTime
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}

type Message {
    id: ID! @id
    text: String!
    from: User! @relation(name: "From")
    to: User! @relation(name: "To")
    chatRoom: ChatRoom! @relation(name: "MessagesOfChatRoom")
    readMessage: Boolean! @default(value: false)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}
 
type GroupRoom {
    id: ID! @id
    roomName: String!
    founderUser: User! @relation(name: "GroupRoomsOfUser")
    coverPhoto: String
        @default(
            value: "https://pbs.twimg.com/profile_images/926440213475246080/BkBTGG8b_400x400.jpg"
        )
    groupRoomMember: [GroupRoomMember!]! @relation(name: "GroupRoomMemberOfGroupRoom", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}

type GroupRoomMember {
    id: ID! @id
    groupRoom: GroupRoom! @relation(name: "GroupRoomMemberOfGroupRoom")
    participants: [User!]! @relation(name: "GroupRoomMemberOfUser") 
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}